



Control of flow



In addition to operators, control flow statements are also essential in C++ programming. Control flow statements allow the programmer to control the order in which statements are executed based on certain conditions. Some of the commonly used control flow statements in C++ include:

- if/else statements: used for conditional execution of statements based on a certain condition.

- switch statements: used for executing different blocks of code based on the value of a variable.

- loops (for, while, do-while): used for repeating a block of code until a certain condition is met.

- break/continue statements: used for interrupting or skipping a loop based on certain conditions.

- goto statement: used for jumping to a specific label in the code.

Overall, control flow statements are important in C++ programming as they enable the programmer to create complex logic and execute it in a precise and efficient manner.




Basic structure in programming language



The basic structure of a programming language typically includes the following elements:

1. Data types: These are used to define the type of data that can be used in a program, such as integers, floating point numbers, characters, etc.

2. Variables: These are used to store values that can be used throughout the program.

3. Operators: These are used to perform mathematical or logical operations on data.

4. Control structures: These include if/else statements, loops, and other statements that allow the program to make decisions and repeat actions based on certain conditions.

5. Functions: These are blocks of code that can be reused throughout a program to perform specific tasks.

6. Input/output: This allows the program to receive input from the user and display output to the user.

7. Comments: These are used to add notes to the code that explain what it does and how it works.

Overall, these elements work together to create a structured and organized program that can perform complex tasks.




Conditional or selection statements


Conditional or selection statements in C++ allow the program to make decisions based on certain conditions. These statements use keywords such as if, else if, and else.

The basic syntax for a conditional statement is:

```
if (condition) {
  // code to be executed if condition is true
}
```

The condition in the parentheses must evaluate to a boolean value (true or false). If the condition is true, the code inside the curly braces will be executed.

An else if statement can be added to check for another condition if the first condition is not true:

```
if (condition1) {
  // code to be executed if condition1 is true
} else if (condition2) {
  // code to be executed if condition2 is true
}
```

If condition1 is not true, then the program will check condition2. If condition2 is true, then the code inside the second set of curly braces will be executed.

Finally, an else statement can be added to provide a default action if none of the conditions are true:

```
if (condition1) {
  // code to be executed if condition1 is true
} else if (condition2) {
  // code to be executed if condition2 is true
} else {
  // code to be executed if neither condition1 nor condition2 is true
}
```

Conditional statements are useful for implementing decision-making logic in a program, such as determining whether a user input is valid or selecting different paths through a program based on user choices.



The one-way if statement


The one-way if statement is a basic conditional statement that only checks for one condition. It has the following syntax:

```
if (condition) {
  // code to be executed if condition is true
}
```

If the condition is true, then the code inside the curly braces will be executed. If the condition is false, then the code inside the curly braces will be skipped and the program will continue to the next line of code.

The one-way if statement is useful for simple decision-making logic where there is only one possible outcome. However, for more complex situations where there are multiple conditions or actions to take, the if-else or if-else-if statements are more appropriate.




Two-way if-else statement


The two-way if-else statement is a conditional statement that checks for two possible outcomes. It has the following syntax:

```
if (condition) {
  // code to be executed if condition is true
} else {
  // code to be executed if condition is false
}
```

If the condition is true, then the code inside the first set of curly braces will be executed. If the condition is false, then the code inside the second set of curly braces will be executed.

The two-way if-else statement is useful for decision-making logic where there are only two possible outcomes. It can also be used in combination with other if-else statements to create more complex decision-making logic.




The multi-way if-else statement


The multi-way if-else statement is a conditional statement that checks for multiple possible outcomes. It has the following syntax:

```
if (condition1) {
  // code to be executed if condition1 is true
} else if (condition2) {
  // code to be executed if condition2 is true
} else if (condition3) {
  // code to be executed if condition3 is true
} else {
  // code to be executed if none of the conditions are true
}
```

The multi-way if-else statement allows for multiple conditions to be checked, and the code block that corresponds to the first true condition will be executed. If none of the conditions are true, then the code block inside the final else statement will be executed.

The multi-way if-else statement is useful for decision-making logic where there are multiple possible outcomes, and it can be used to create more complex decision-making logic by nesting multiple if-else statements inside each other.



Suppose x=3 and y=2; show the output if any of the following code. What is the output if x=3 and y=4? What is the output if x=2 and y=2?
Draw a flowchart of code.
     if (x>2) {
       if (y>2) {
           int z=x+y;
           cout<<"z is "<<z<<sndl;
        }
      }
else
         cout << "x is" << x << endl;


If x=3 and y=2, the output will be "z is 5".
If x=3 and y=4, the output will be "z is 7".
If x=2 and y=2, there will be no output.
Flowchart:
Start -> Input x and y -> Check if x>2 -> Check if y>2 -> Calculate z=x+y -> Output "z is " + z -> End
                                                    -> Output "x is " + x -> End


Write a program to accept any character from keyboard and display whether it is vowel or not


Here is a Python program to accept any character from the keyboard and display whether it is a vowel or not:

ch = input("Enter a character: ")

if ch in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']:
    print(ch, "is a vowel")
else:
    print(ch, "is not a vowel")


Explanation:
- We first accept a character from the user using the input() function and store it in the variable ch.
- We then check if the character is present in the list of vowels (both lowercase and uppercase) using the in operator.
- If the character is a vowel, we print a message saying so. Otherwise, we print a message saying that it is not a vowel.


Write aprogram that gives grade based on the following scale using if else statment


Here's an example program that gives a grade based on a scale:

score = int(input("Enter your score: "))

if score >= 90:
    print("Your grade is A")
elif score >= 80:
    print("Your grade is B")
elif score >= 70:
    print("Your grade is C")
elif score >= 60:
    print("Your grade is D")
else:
    print("Your grade is F")


In this program, we first accept the score from the user using the input() function and convert it to an integer using the int() function. We then store it in the variable score.

We then use a series of if and elif statements to check the score against different thresholds and assign the corresponding grade. The conditions are ordered from highest to lowest, so if a condition is true, we know that the previous ones were false.

If none of the conditions are true (i.e., the score is less than 60), we assign a grade of F.



Write a program that display greatest of three numbers using if statement accept input from user


Here's an example program that accepts three numbers from the user and displays the greatest one using if statements:

num1 = int(input("Enter first number: "))
num2 = int(input("Enter second number: "))
num3 = int(input("Enter third number: "))

if num1 >= num2 and num1 >= num3:
    print("The greatest number is", num1)
elif num2 >= num1 and num2 >= num3:
    print("The greatest number is", num2)
else:
    print("The greatest number is", num3)


In this program, we first accept three numbers from the user using the input() function and convert them to integers using the int() function. We then store them in the variables num1, num2, and num3.

We then use a series of if and elif statements to compare the numbers and determine which one is the greatest. The conditions check if num1 is greater than or equal to both num2 and num3, if num2 is greater than or equal to both num1 and num3, and if neither of those conditions are true (i.e., num3 must be the greatest).

Finally, we use the print() function to display the result to the user.


Write a program that accepts three numbers from the user and prints increasing if the numbers are in increasing order , decreasing if the numbers are in decreasing order   and neither increasing nor decreasing order otherwise.


num1 = int(input("Enter first number: "))
num2 = int(input("Enter second number: "))
num3 = int(input("Enter third number: "))

if num1 < num2 < num3:
    print("Increasing")
elif num1 > num2 > num3:
    print("Decreasing")
else:
    print("Neither increasing nor decreasing")


Write a program to calculate sum, average and check you grade status , if pass or fail.
Hint;accept at least thee course marks then calculate the total and average of your mark the status will be based on average value. Display the total mark average and status


mark1 = int(input("Enter marks for first course: "))
mark2 = int(input("Enter marks for second course: "))
mark3 = int(input("Enter marks for third course: "))

total = mark1 + mark2 + mark3
average = total / 3

print("Total marks:", total)
print("Average marks:", average)

if average >= 40:
    print("Pass")
else:
    print("Fail")


Write a program that calculates sum of numbers from 1 to 100.


sum = 0
for i in range(1, 101):
    sum += i

print("Sum of numbers from 1 to 100:", sum)


Write a program that displays numbers between 0-100 that are divisible by 2,3, and 5. The numbers displayed should be those that can be divided by 2,3, and 5 without remainder.


for i in range(0, 101):
    if i % 2 == 0 and i % 3 == 0 and i % 5 == 0:
        print(i)


Write a program that calculates factorial using for loop, while loop and do while loops. The program should accept the number and then perform the calculation of the factorial.


# Using for loop

num = int(input("Enter a number: "))
factorial = 1

for i in range(1, num+1):
    factorial *= i

print("Factorial of", num, "is", factorial)


# Using while loop

num = int(input("Enter a number: "))
factorial = 1
i = 1

while i <= num:
    factorial *= i
    i += 1

print("Factorial of", num, "is", factorial)


# Using do while loop (using a while loop with a break statement)

num = int(input("Enter a number: "))
factorial = 1
i = 1

while True:
    factorial *= i
    i += 1
    if i > num:
        break

print("Factorial of", num, "is", factorial)


Write a while loop that prints the average of numbers from 1 to 10.

# Using while loop to find average of numbers from 1 to 10

sum = 0
count = 1

while count <= 10:
    sum += count
    count += 1

average = sum / 10
print("Average of numbers from 1 to 10 is", average)


